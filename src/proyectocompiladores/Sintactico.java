
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 21 08:42:54 COT 2015
//----------------------------------------------------

package proyectocompiladores;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 21 08:42:54 COT 2015
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\003\000\002\015\004\000\002\015\003" +
    "\000\002\015\004\000\002\015\003\000\002\015\004\000" +
    "\002\015\003\000\002\015\004\000\002\015\003\000\002" +
    "\015\004\000\002\015\003\000\002\015\004\000\002\015" +
    "\003\000\002\021\013\000\002\024\013\000\002\025\011" +
    "\000\002\023\010\000\002\022\010\000\002\017\006\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\054\003\000\002\054\003\000\002\055\012\000\002\056" +
    "\004\000\002\016\005\000\002\026\006\000\002\040\005" +
    "\000\002\040\003\000\002\037\005\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\030" +
    "\004\000\002\030\003\000\002\030\004\000\002\030\003" +
    "\000\002\062\005\000\002\031\005\000\002\046\004\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\057\003\000\002\047\013\000\002\035" +
    "\006\000\002\060\010\000\002\061\010\000\002\064\005" +
    "\000\002\013\006\000\002\043\007\000\002\042\003\000" +
    "\002\042\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\016\014\021\025\011\026\026\027\024\032" +
    "\013\033\006\001\002\000\004\014\021\001\002\000\014" +
    "\025\ufff6\026\ufff6\027\ufff6\032\ufff6\033\ufff6\001\002\000" +
    "\004\006\207\001\002\000\004\006\164\001\002\000\014" +
    "\025\ufffa\026\ufffa\027\ufffa\032\ufffa\033\ufffa\001\002\000" +
    "\004\006\uffeb\001\002\000\014\025\ufffc\026\ufffc\027\ufffc" +
    "\032\ufffc\033\ufffc\001\002\000\004\006\151\001\002\000" +
    "\014\025\ufff4\026\ufff4\027\ufff4\032\ufff4\033\ufff4\001\002" +
    "\000\004\002\ufffe\001\002\000\012\002\uffe7\005\uffe7\015" +
    "\uffe7\037\uffe7\001\002\000\004\002\150\001\002\000\012" +
    "\002\uffe8\005\uffe8\015\uffe8\037\uffe8\001\002\000\020\014" +
    "\021\015\063\034\044\036\047\037\041\040\050\046\057" +
    "\001\002\000\014\025\011\026\026\027\024\032\013\033" +
    "\006\001\002\000\014\025\ufff8\026\ufff8\027\ufff8\032\ufff8" +
    "\033\ufff8\001\002\000\004\006\uffe9\001\002\000\014\025" +
    "\ufff2\026\ufff2\027\ufff2\032\ufff2\033\ufff2\001\002\000\004" +
    "\006\uffea\001\002\000\014\025\ufff9\026\ufff9\027\ufff9\032" +
    "\ufff9\033\ufff9\001\002\000\014\025\ufffb\026\ufffb\027\ufffb" +
    "\032\ufffb\033\ufffb\001\002\000\014\025\ufff3\026\ufff3\027" +
    "\ufff3\032\ufff3\033\ufff3\001\002\000\014\025\ufff7\026\ufff7" +
    "\027\ufff7\032\ufff7\033\ufff7\001\002\000\004\014\021\001" +
    "\002\000\014\025\ufffd\026\ufffd\027\ufffd\032\ufffd\033\ufffd" +
    "\001\002\000\014\025\ufff5\026\ufff5\027\ufff5\032\ufff5\033" +
    "\ufff5\001\002\000\004\002\000\001\002\000\010\005\uffdc" +
    "\015\uffdc\037\uffdc\001\002\000\010\005\uffdd\015\uffdd\037" +
    "\uffdd\001\002\000\004\013\143\001\002\000\010\005\uffdb" +
    "\015\uffdb\037\uffdb\001\002\000\010\005\uffd0\015\uffd0\037" +
    "\uffd0\001\002\000\004\013\133\001\002\000\012\005\uffd5" +
    "\015\uffd5\037\uffd5\046\uffd5\001\002\000\010\005\uffd9\015" +
    "\uffd9\037\uffd9\001\002\000\004\014\130\001\002\000\016" +
    "\014\021\034\044\036\047\037\041\040\050\046\057\001" +
    "\002\000\012\005\uffd7\015\uffd7\037\uffd7\046\uffd7\001\002" +
    "\000\012\005\uffdf\015\uffdf\037\uffdf\046\113\001\002\000" +
    "\010\005\uffde\015\uffde\037\uffde\001\002\000\004\005\105" +
    "\001\002\000\010\005\uffcd\015\uffcd\037\uffcd\001\002\000" +
    "\010\005\uffda\015\uffda\037\uffda\001\002\000\010\013\065" +
    "\017\064\022\066\001\002\000\010\005\uffcf\015\uffcf\037" +
    "\uffcf\001\002\000\010\005\uffd1\015\uffd1\037\uffd1\001\002" +
    "\000\010\005\uffce\015\uffce\037\uffce\001\002\000\012\002" +
    "\uffe5\005\uffe5\015\uffe5\037\uffe5\001\002\000\010\044\072" +
    "\045\075\046\073\001\002\000\006\016\070\046\067\001" +
    "\002\000\012\005\uffd2\015\uffd2\037\uffd2\046\uffd2\001\002" +
    "\000\004\016\071\001\002\000\010\005\uffc8\015\uffc8\037" +
    "\uffc8\001\002\000\010\005\uffc7\015\uffc7\037\uffc7\001\002" +
    "\000\022\005\uffd3\007\uffbe\010\uffbe\011\uffbe\012\uffbe\015" +
    "\uffd3\037\uffd3\046\uffd3\001\002\000\020\005\uffbf\007\uffbf" +
    "\010\uffbf\011\uffbf\012\uffbf\015\uffbf\037\uffbf\001\002\000" +
    "\012\007\101\010\077\011\100\012\102\001\002\000\020" +
    "\005\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\015\uffbd\037" +
    "\uffbd\001\002\000\010\044\103\045\075\046\073\001\002" +
    "\000\010\044\uffc2\045\uffc2\046\uffc2\001\002\000\010\044" +
    "\uffc1\045\uffc1\046\uffc1\001\002\000\010\044\uffc3\045\uffc3" +
    "\046\uffc3\001\002\000\010\044\uffc0\045\uffc0\046\uffc0\001" +
    "\002\000\010\005\uffbe\015\uffbe\037\uffbe\001\002\000\010" +
    "\005\uffc6\015\uffc6\037\uffc6\001\002\000\016\014\021\034" +
    "\044\036\047\037\041\040\050\046\057\001\002\000\004" +
    "\005\107\001\002\000\016\014\021\034\044\036\047\037" +
    "\041\040\050\046\057\001\002\000\004\005\111\001\002" +
    "\000\004\015\112\001\002\000\012\002\uffe6\005\uffe6\015" +
    "\uffe6\037\uffe6\001\002\000\006\017\116\022\066\001\002" +
    "\000\012\005\uffd8\015\uffd8\037\uffd8\046\uffd8\001\002\000" +
    "\012\005\uffd6\015\uffd6\037\uffd6\046\uffd6\001\002\000\004" +
    "\044\117\001\002\000\012\005\uffd3\015\uffd3\037\uffd3\046" +
    "\uffd3\001\002\000\004\037\121\001\002\000\004\013\122" +
    "\001\002\000\004\046\123\001\002\000\004\017\126\001" +
    "\002\000\004\016\125\001\002\000\010\005\uffc9\015\uffc9" +
    "\037\uffc9\001\002\000\004\044\127\001\002\000\004\016" +
    "\uffd4\001\002\000\016\014\021\034\044\036\047\037\041" +
    "\040\050\046\057\001\002\000\004\015\132\001\002\000" +
    "\010\005\uffcb\015\uffcb\037\uffcb\001\002\000\004\046\123" +
    "\001\002\000\004\016\135\001\002\000\004\014\136\001" +
    "\002\000\004\035\137\001\002\000\016\014\021\034\044" +
    "\036\047\037\041\040\050\046\057\001\002\000\004\005" +
    "\141\001\002\000\004\015\142\001\002\000\010\005\uffcc" +
    "\015\uffcc\037\uffcc\001\002\000\004\046\123\001\002\000" +
    "\004\016\145\001\002\000\004\040\146\001\002\000\016" +
    "\014\021\034\044\036\047\037\041\040\050\046\057\001" +
    "\002\000\010\005\uffca\015\uffca\037\uffca\001\002\000\004" +
    "\002\001\001\002\000\004\046\152\001\002\000\006\017" +
    "\154\023\153\001\002\000\004\044\157\001\002\000\004" +
    "\050\155\001\002\000\004\005\156\001\002\000\014\025" +
    "\uffed\026\uffed\027\uffed\032\uffed\033\uffed\001\002\000\004" +
    "\024\160\001\002\000\004\017\161\001\002\000\004\046" +
    "\162\001\002\000\004\005\163\001\002\000\014\025\ufff0" +
    "\026\ufff0\027\ufff0\032\ufff0\033\ufff0\001\002\000\004\046" +
    "\165\001\002\000\010\005\170\013\171\023\167\001\002" +
    "\000\004\014\uffe4\001\002\000\004\044\202\001\002\000" +
    "\014\025\uffec\026\uffec\027\uffec\032\uffec\033\uffec\001\002" +
    "\000\010\025\011\026\026\027\024\001\002\000\004\016" +
    "\201\001\002\000\006\004\177\016\uffe1\001\002\000\004" +
    "\006\175\001\002\000\004\046\176\001\002\000\006\004" +
    "\uffe0\016\uffe0\001\002\000\010\025\011\026\026\027\024" +
    "\001\002\000\004\016\uffe2\001\002\000\004\014\uffe3\001" +
    "\002\000\004\024\203\001\002\000\004\017\204\001\002" +
    "\000\004\044\205\001\002\000\004\005\206\001\002\000" +
    "\014\025\ufff1\026\ufff1\027\ufff1\032\ufff1\033\ufff1\001\002" +
    "\000\004\046\210\001\002\000\006\017\212\023\211\001" +
    "\002\000\004\044\215\001\002\000\004\051\213\001\002" +
    "\000\004\005\214\001\002\000\014\025\uffee\026\uffee\027" +
    "\uffee\032\uffee\033\uffee\001\002\000\004\024\216\001\002" +
    "\000\004\005\217\001\002\000\014\025\uffef\026\uffef\027" +
    "\uffef\032\uffef\033\uffef\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\034\002\016\015\021\016\003\017\011\020" +
    "\006\021\007\022\022\023\004\024\013\025\024\054\014" +
    "\055\017\056\015\001\001\000\010\054\217\055\017\056" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\012\036\013\037\014\052\027\053\030\051\031\050" +
    "\035\042\043\045\046\044\047\054\054\041\055\017\056" +
    "\015\057\060\060\057\061\061\064\055\001\001\000\022" +
    "\016\032\017\033\020\006\021\027\022\026\023\031\024" +
    "\034\025\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\054\035\055\017\056\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\012\036\013\037\014\052\027" +
    "\117\030\051\031\050\035\042\043\045\046\044\047\054" +
    "\054\041\055\017\056\015\057\060\060\057\061\061\064" +
    "\055\001\001\000\002\001\001\000\006\031\113\046\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\075\001\001" +
    "\000\002\001\001\000\004\041\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\012\036\013" +
    "\037\014\052\027\105\030\051\031\050\035\042\043\045" +
    "\046\044\047\054\054\041\055\017\056\015\057\060\060" +
    "\057\061\061\064\055\001\001\000\002\001\001\000\044" +
    "\012\036\013\037\014\052\027\107\030\051\031\050\035" +
    "\042\043\045\046\044\047\054\054\041\055\017\056\015" +
    "\057\060\060\057\061\061\064\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\012\036\013\037\014\052\027\130\030\051\031\050\035" +
    "\042\043\045\046\044\047\054\054\041\055\017\056\015" +
    "\057\060\060\057\061\061\064\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\012" +
    "\036\013\037\014\052\027\137\030\051\031\050\035\042" +
    "\043\045\046\044\047\054\054\041\055\017\056\015\057" +
    "\060\060\057\061\061\064\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\143\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\012\036" +
    "\013\037\014\052\027\146\030\051\031\050\035\042\043" +
    "\045\046\044\047\054\054\041\055\017\056\015\057\060" +
    "\060\057\061\061\064\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\173\037\172\040\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\173\037" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    /* Reporte de error encontrado. */
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m +"\n");
    }
	
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
	   
    public static void main(String[] args){
        try {
            Sintactico asin = new Sintactico(
                    new Lexico( new FileReader(args[0])));
            Object result = asin.parse().value;
            System.out.println("sin errores");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


   /*Aqui podemos cargar dcodigo asociado a las distintas producciones
 gramaticales, se puede poner metodos y atributos
   */
   
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VAL ::= FLOTANTE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VAL ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VAL ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("VAL",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operador ::= DIV 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador ::= MULT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador ::= RESTA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador ::= SUMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ASIG ::= MENOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIG ::= MAYOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresionesaritmeticas ::= IDENTIFICADOR EQUAL VAL operador VAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresionesaritmeticas",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // entrada ::= IDENTIFICADOR PARENTESISABIERTO IDENTIFICADOR PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("entrada",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // llamadafuncion ::= IDENTIFICADOR PARENTESISABIERTO PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("llamadafuncion",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // palabrado ::= DO comandosimple WHILE PARENTESISABIERTO expresion PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("palabrado",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // palabrawhile ::= WHILE PARENTESISABIERTO expresion PARENTESISCERRADO DO comandosimple 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("palabrawhile",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // palabraelse ::= PELSE LLAVEABIERTA comandosimple LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("palabraelse",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sinelse ::= IF PARENTESISABIERTO expresion PARENTESISCERRADO LLAVEABIERTA THEN comandosimple TER LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sinelse",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // palabraif ::= sinelse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("palabraif",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // controlflujo ::= palabrado 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("controlflujo",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // controlflujo ::= palabrawhile 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("controlflujo",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // controlflujo ::= palabraelse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("controlflujo",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // controlflujo ::= palabraif 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("controlflujo",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // atribucionsimple1 ::= IDENTIFICADOR INCREMENTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atribucionsimple1",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atribucionsimple ::= IDENTIFICADOR EQUAL INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atribucionsimple",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= IDENTIFICADOR EQUAL INTEGER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // atribucion ::= atribucionsimple1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atribucion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // atribucion ::= atribucion atribucionsimple1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atribucion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // atribucion ::= atribucionsimple 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atribucion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // atribucion ::= atribucion atribucionsimple 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("atribucion",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comandosimple ::= expresionesaritmeticas 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comandosimple ::= llamadafuncion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comandosimple ::= bloque 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comandosimple ::= salida 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comandosimple ::= entrada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comandosimple ::= controlflujo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comandosimple ::= atribucion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("comandosimple",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // funval ::= tipovariable DOSP IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funval",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // recur ::= funval 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("recur",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // recur ::= funval COMA funval 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("recur",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listater ::= IDENTIFICADOR PARENTESISABIERTO recur PARENTESISCERRADO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listater",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // conjuntoFunciones ::= tipovariable DOSP listater 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("conjuntoFunciones",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloquecomandossin ::= LLAVEABIERTA LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloquecomandossin",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloquecomandos ::= LLAVEABIERTA comandosimple TER comandosimple TER comandosimple TER LLAVECERRADA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloquecomandos",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bloque ::= bloquecomandossin 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bloque ::= bloquecomandos 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bloque",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipovariable ::= BOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipovariable",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipovariable ::= FLOA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipovariable",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipovariable ::= INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipovariable",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variableGlobal1 ::= tipovariable DOSP IDENTIFICADOR TER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("variableGlobal1",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vGlobalchart ::= CHA DOSP IDENTIFICADOR EQUAL CHAR TER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalchart",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vGlobalString ::= string DOSP IDENTIFICADOR EQUAL STRING TER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalString",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vGlobalVectorSTR ::= string DOSP IDENTIFICADOR CORCHIZQ INTEGER CORCHDER TER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalVectorSTR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vGlobalVectorCHA ::= CHA DOSP IDENTIFICADOR CORCHIZQ INTEGER CORCHDER EQUAL IDENTIFICADOR TER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalVectorCHA",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vGlobalVector ::= tipovariable DOSP IDENTIFICADOR CORCHIZQ INTEGER CORCHDER EQUAL INTEGER TER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("vGlobalVector",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracionVariablesGlobales ::= vGlobalVectorSTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionVariablesGlobales ::= declaracionVariablesGlobales vGlobalVectorSTR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionVariablesGlobales ::= vGlobalVectorCHA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracionVariablesGlobales ::= declaracionVariablesGlobales vGlobalVectorCHA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionVariablesGlobales ::= vGlobalString 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionVariablesGlobales ::= declaracionVariablesGlobales vGlobalString 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionVariablesGlobales ::= vGlobalchart 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracionVariablesGlobales ::= declaracionVariablesGlobales vGlobalchart 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracionVariablesGlobales ::= vGlobalVector 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracionVariablesGlobales ::= declaracionVariablesGlobales vGlobalVector 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracionVariablesGlobales ::= variableGlobal1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracionVariablesGlobales ::= declaracionVariablesGlobales variableGlobal1 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariablesGlobales",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= bloque 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= conjuntoFunciones bloque 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaracionVariablesGlobales conjuntoFunciones bloque 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

